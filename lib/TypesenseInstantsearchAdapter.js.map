{"version":3,"file":"TypesenseInstantsearchAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","_defineProperty2","_toConsumableArray2","_asyncToGenerator2","_classCallCheck2","_createClass2","_Configuration","_typesense","_SearchRequestAdapter","_SearchResponseAdapter","_FacetSearchResponseAdapter","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","TypesenseInstantsearchAdapter","options","_this","updateConfiguration","queryEnhancementCache","Map","searchClient","clearCache","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","key","_enhanceQuery2","mark","_callee","query","_this$configuration$q","controller","timeoutId","response","data","wrap","_callee$","_context","prev","next","abrupt","configuration","queryEnhancement","enabled","has","console","debug","concat","get","AbortController","setTimeout","abort","timeout","fetch","url","method","headers","body","JSON","stringify","text","signal","sent","clearTimeout","ok","Error","status","json","processed","set","t0","name","warn","message","stop","_enhanceQuery","_x","_enhanceSearchRequests2","_callee3","_this2","allQueries","uniqueQueries","enhancementPromises","enhancements","queryMap","_callee3$","_context3","map","req","params","Set","_ref","_callee2","enhancedQuery","_callee2$","_context2","original","enhanced","_x3","Promise","all","_enhanceSearchRequests","_x2","_searchTypesenseAndAdapt","_callee4","_this3","typesenseResponse","enhancedRequests","adaptedResponses","_callee4$","_context4","_adaptAndPerformTypesenseRequest","results","typesenseResult","index","_validateTypesenseResult","responseAdapter","SearchResponseAdapter","adaptedResponse","adapt","error","_x4","_searchTypesenseForFacetValuesAndAdapt","_callee5","_this4","_callee5$","_context5","FacetSearchResponseAdapter","_x5","_adaptAndPerformTypesenseRequest2","_callee6","requestAdapter","_callee6$","_context6","SearchRequestAdapter","typesenseClient","request","_x6","TypesenseSearchClient","server","clear","Configuration","validate","code","hits","grouped_hits"],"sources":["../src/TypesenseInstantsearchAdapter.js"],"sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.updateConfiguration(options);\n    this.queryEnhancementCache = new Map();\n    this.searchClient = {\n      clearCache: () => this.clearCache(),\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  /**\n   * Enhances a search query by calling an external API\n   */\n  async _enhanceQuery(query) {\n    if (!query || query === \"*\") {\n      return query;\n    }\n\n    // Check if query enhancement is enabled\n    if (!this.configuration.queryEnhancement?.enabled) {\n      return query;\n    }\n\n    // Check cache first\n    if (this.queryEnhancementCache.has(query)) {\n      console.debug(`[Query Enhancement] Using cached result for: \"${query}\"`);\n      return this.queryEnhancementCache.get(query);\n    }\n\n    console.debug(`[Query Enhancement] Making API call for: \"${query}\"`);\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.configuration.queryEnhancement.timeout || 5000);\n\n      const response = await fetch(this.configuration.queryEnhancement.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: query,\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data && data.processed) {\n        // Cache the enhanced query\n        this.queryEnhancementCache.set(query, data.processed);\n        console.debug(`[Query Enhancement] API success: \"${query}\" -> \"${data.processed}\"`);\n        return data.processed;\n      }\n\n      // Cache the original query if no enhancement\n      this.queryEnhancementCache.set(query, query);\n      console.debug(`[Query Enhancement] No enhancement returned for: \"${query}\"`);\n      return query;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.warn(\n          `[Typesense-Instantsearch-Adapter] Query enhancement timed out after ${this.configuration.queryEnhancement.timeout || 5000}ms`,\n        );\n      } else {\n        console.warn(\"[Typesense-Instantsearch-Adapter] Query enhancement failed:\", error.message);\n      }\n      // Cache the original query on error\n      this.queryEnhancementCache.set(query, query);\n      return query;\n    }\n  }\n\n  async _enhanceSearchRequests(instantsearchRequests) {\n    // Get all unique queries from all requests\n    const allQueries = instantsearchRequests\n      .map((req) => req.params.query)\n      .filter((query) => query && query !== \"\" && query !== \"*\");\n\n    if (allQueries.length === 0) {\n      return instantsearchRequests; // No enhancement needed\n    }\n\n    const uniqueQueries = [...new Set(allQueries)];\n    console.debug(\n      `[Query Enhancement] Processing ${instantsearchRequests.length} requests with ${uniqueQueries.length} unique queries:`,\n      uniqueQueries,\n    );\n\n    // Enhance all unique queries in parallel\n    const enhancementPromises = uniqueQueries.map(async (query) => {\n      const enhancedQuery = await this._enhanceQuery(query);\n      return { original: query, enhanced: enhancedQuery };\n    });\n\n    const enhancements = await Promise.all(enhancementPromises);\n    const queryMap = new Map(enhancements.map((e) => [e.original, e.enhanced]));\n\n    // Update all requests with enhanced queries\n    return instantsearchRequests.map((req) => {\n      if (req.params.query && req.params.query !== \"\" && req.params.query !== \"*\") {\n        const enhancedQuery = queryMap.get(req.params.query);\n        if (enhancedQuery && enhancedQuery !== req.params.query) {\n          return {\n            ...req,\n            params: {\n              ...req.params,\n              query: enhancedQuery,\n            },\n          };\n        }\n      }\n      return req;\n    });\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      // Enhance queries before processing\n      const enhancedRequests = await this._enhanceSearchRequests(instantsearchRequests);\n\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(enhancedRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index], // Use original requests for response mapping\n          this.configuration,\n          typesenseResponse.results,\n          typesenseResponse,\n        );\n        let adaptedResponse = responseAdapter.adapt();\n\n        return adaptedResponse;\n      });\n\n      return {\n        results: adaptedResponses,\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      // Enhance queries before processing (same as regular search)\n      const enhancedRequests = await this._enhanceSearchRequests(instantsearchRequests);\n\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(enhancedRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index], // Use original requests for response mapping\n          this.configuration,\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  clearCache() {\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    this.queryEnhancementCache.clear();\n    return this.searchClient;\n  }\n\n  updateConfiguration(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return true;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}