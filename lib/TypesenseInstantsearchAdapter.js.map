{"version":3,"file":"TypesenseInstantsearchAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","_defineProperty2","_toConsumableArray2","_asyncToGenerator2","_classCallCheck2","_createClass2","_Configuration","_typesense","_SearchRequestAdapter","_SearchResponseAdapter","_FacetSearchResponseAdapter","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","TypesenseInstantsearchAdapter","options","_this","updateConfiguration","queryEnhancementCache","Map","queryEnhancementPromises","searchClient","clearCache","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","key","_enhanceQuery2","mark","_callee","query","_this$configuration$q","enhancementPromise","result","wrap","_callee$","_context","prev","next","abrupt","configuration","queryEnhancement","enabled","has","console","debug","concat","get","sent","_performQueryEnhancement","set","finish","stop","_enhanceQuery","_x","_performQueryEnhancement2","_callee2","controller","timeoutId","response","data","_callee2$","_context2","AbortController","setTimeout","abort","timeout","fetch","url","method","headers","body","JSON","stringify","text","signal","clearTimeout","ok","Error","status","json","processed","t0","name","warn","message","_x2","_enhanceSearchRequests2","_callee4","_this2","allQueries","uniqueQueries","enhancementPromises","enhancements","queryMap","_callee4$","_context4","map","req","params","Set","_ref","_callee3","enhancedQuery","_callee3$","_context3","original","enhanced","_x4","Promise","all","_enhanceSearchRequests","_x3","_searchTypesenseAndAdapt","_callee5","_this3","typesenseResponse","enhancedRequests","adaptedResponses","_callee5$","_context5","_adaptAndPerformTypesenseRequest","results","typesenseResult","index","_validateTypesenseResult","responseAdapter","SearchResponseAdapter","adaptedResponse","adapt","error","_x5","_searchTypesenseForFacetValuesAndAdapt","_callee6","_this4","_callee6$","_context6","FacetSearchResponseAdapter","_x6","_adaptAndPerformTypesenseRequest2","_callee7","requestAdapter","_callee7$","_context7","SearchRequestAdapter","typesenseClient","request","_x7","TypesenseSearchClient","server","clear","Configuration","validate","code","hits","grouped_hits"],"sources":["../src/TypesenseInstantsearchAdapter.js"],"sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.updateConfiguration(options);\n    this.queryEnhancementCache = new Map();\n    this.queryEnhancementPromises = new Map(); // Cache for ongoing promises\n    this.searchClient = {\n      clearCache: () => this.clearCache(),\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  /**\n   * Enhances a search query by calling an external API\n   */\n  async _enhanceQuery(query) {\n    if (!query || query === \"*\") {\n      return query;\n    }\n\n    // Check if query enhancement is enabled\n    if (!this.configuration.queryEnhancement?.enabled) {\n      return query;\n    }\n\n    // Check cache first\n    if (this.queryEnhancementCache.has(query)) {\n      console.debug(`[Query Enhancement] Using cached result for: \"${query}\"`);\n      return this.queryEnhancementCache.get(query);\n    }\n\n    // Check if there's already an ongoing request for this query\n    if (this.queryEnhancementPromises.has(query)) {\n      console.debug(`[Query Enhancement] Waiting for ongoing request for: \"${query}\"`);\n      return await this.queryEnhancementPromises.get(query);\n    }\n\n    console.debug(`[Query Enhancement] Making API call for: \"${query}\"`);\n\n    // Create and cache the promise\n    const enhancementPromise = this._performQueryEnhancement(query);\n    this.queryEnhancementPromises.set(query, enhancementPromise);\n\n    try {\n      const result = await enhancementPromise;\n      // Cache the result\n      this.queryEnhancementCache.set(query, result);\n      return result;\n    } finally {\n      // Remove the promise from cache once completed\n      this.queryEnhancementPromises.delete(query);\n    }\n  }\n\n  /**\n   * Performs the actual API call for query enhancement\n   */\n  async _performQueryEnhancement(query) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.configuration.queryEnhancement.timeout || 5000);\n\n      const response = await fetch(this.configuration.queryEnhancement.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: query,\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data && data.processed) {\n        console.debug(`[Query Enhancement] API success: \"${query}\" -> \"${data.processed}\"`);\n        return data.processed;\n      }\n\n      console.debug(`[Query Enhancement] No enhancement returned for: \"${query}\"`);\n      return query;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.warn(\n          `[Typesense-Instantsearch-Adapter] Query enhancement timed out after ${this.configuration.queryEnhancement.timeout || 5000}ms`,\n        );\n      } else {\n        console.warn(\"[Typesense-Instantsearch-Adapter] Query enhancement failed:\", error.message);\n      }\n      // Return original query on error\n      return query;\n    }\n  }\n\n  async _enhanceSearchRequests(instantsearchRequests) {\n    // Get all unique queries from all requests\n    const allQueries = instantsearchRequests\n      .map((req) => req.params.query)\n      .filter((query) => query && query !== \"\" && query !== \"*\");\n\n    if (allQueries.length === 0) {\n      return instantsearchRequests; // No enhancement needed\n    }\n\n    const uniqueQueries = [...new Set(allQueries)];\n    console.debug(\n      `[Query Enhancement] Processing ${instantsearchRequests.length} requests with ${uniqueQueries.length} unique queries:`,\n      uniqueQueries,\n    );\n\n    // Enhance all unique queries in parallel\n    const enhancementPromises = uniqueQueries.map(async (query) => {\n      const enhancedQuery = await this._enhanceQuery(query);\n      return { original: query, enhanced: enhancedQuery };\n    });\n\n    const enhancements = await Promise.all(enhancementPromises);\n    const queryMap = new Map(enhancements.map((e) => [e.original, e.enhanced]));\n\n    // Update all requests with enhanced queries\n    return instantsearchRequests.map((req) => {\n      if (req.params.query && req.params.query !== \"\" && req.params.query !== \"*\") {\n        const enhancedQuery = queryMap.get(req.params.query);\n        if (enhancedQuery && enhancedQuery !== req.params.query) {\n          return {\n            ...req,\n            params: {\n              ...req.params,\n              query: enhancedQuery,\n            },\n          };\n        }\n      }\n      return req;\n    });\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      // Enhance queries before processing\n      const enhancedRequests = await this._enhanceSearchRequests(instantsearchRequests);\n\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(enhancedRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index], // Use original requests for response mapping\n          this.configuration,\n          typesenseResponse.results,\n          typesenseResponse,\n        );\n        let adaptedResponse = responseAdapter.adapt();\n\n        return adaptedResponse;\n      });\n\n      return {\n        results: adaptedResponses,\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      // Enhance queries before processing (same as regular search)\n      const enhancedRequests = await this._enhanceSearchRequests(instantsearchRequests);\n\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(enhancedRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index], // Use original requests for response mapping\n          this.configuration,\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  clearCache() {\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    this.queryEnhancementCache.clear();\n    this.queryEnhancementPromises.clear();\n    return this.searchClient;\n  }\n\n  updateConfiguration(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return true;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}