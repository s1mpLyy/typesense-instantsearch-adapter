{"version":3,"file":"SearchRequestAdapter.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","SearchRequestAdapter","_objectWithoutProperties2","_regenerator","_asyncToGenerator2","_slicedToArray2","_classCallCheck2","_createClass2","_excluded","instantsearchRequests","typesenseClient","configuration","additionalSearchParameters","collectionSpecificSearchParameters","queryEnhancementCache","Map","key","_shouldUseExactMatchForField","fieldName","collectionName","_this$configuration$c","_this$configuration$f","collectionSpecificFilterByOptions","exactMatch","filterByOptions","_adaptFacetFilters","facetFilters","_this","adaptedResult","transformedTypesenseFilters","map","item","Array","isArray","intermediateFacetFilters","forEach","facetFilter","_this$_parseFacetFilt","_parseFacetFilter","fieldValue","push","keys","length","console","error","concat","join","fieldValues","_fieldValues$reduce","reduce","result","startsWith","_isNumber","substring","_fieldValues$reduce2","excludedFieldValues","includedFieldValues","typesenseFilterStringComponents","operator","v","_escapeFacetValue","typesenseFilterString","filter","f","_this$_parseFacetFilt2","_this$configuration$f2","filterStringMatchingRegex","facetFilterMatches","facetableFieldsWithSpecialCharacters","sanitizedFacetableFieldsWithSpecialCharacters","flat","replace","RegExp","match","constructor","DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX","Number","isInteger","_adaptNumericFilters","numericFilters","_this2","filtersHash","_this2$_parseNumericF","_parseNumericFilter","adaptedFilters","field","warn","JSON","stringify","numericFilter","_this$configuration$f3","numericFilterMatches","_numericFilterMatches","_numericFilterMatches2","DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX","_numericFilterMatches3","_numericFilterMatches4","_adaptGeoFilter","_ref","insideBoundingBox","aroundRadius","aroundLatLng","insidePolygon","x1","y1","x2","y2","_insideBoundingBox$fl","_insideBoundingBox$fl2","_insideBoundingBox$sp","split","_insideBoundingBox$sp2","geoLocationField","Error","adaptedAroundRadius","parseFloat","coordinates","_adaptFilters","instantsearchParams","filters","_adaptIndexName","indexName","INDEX_NAME_MATCHING_REGEX","_adaptSortBy","_adaptFacetBy","facets","_this3","facet","_this3$configuration$","collectionSpecificFacetByOptions","facetByOptions","_adaptRulesContextsToOverrideTags","ruleContexts","_enhanceQuery2","mark","_callee","query","_this$configuration$q","controller","timeoutId","response","data","wrap","_callee$","_context","prev","next","abrupt","queryEnhancement","enabled","AbortController","setTimeout","abort","timeout","fetch","url","method","headers","body","text","signal","sent","clearTimeout","ok","status","json","processed","t0","name","message","stop","_enhanceQuery","_x","apply","arguments","_buildSearchParameters2","_callee2","instantsearchRequest","_this$configuration$c2","_this$configuration$s","params","adaptedCollectionName","snakeCasedAdditionalSearchParameters","_i","_Object$entries","_Object$entries$_i","_i2","_Object$entries2","_Object$entries2$_i","_key","_value","typesenseSearchParams","adaptedSortBy","originalQuery","enhancedQuery","sortByOption","_callee2$","_context2","entries","_camelToSnakeCase","assign","undefined","collection","q","facet_by","filter_by","sort_by","max_facet_values","maxValuesPerFacet","page","hitsPerPage","per_page","facetQuery","facet_query","facetName","override_tags","typesenseVectorQuery","vector_query","collectionSpecificSortByOptions","sortByOptions","fromEntries","_ref2","_ref3","_","_buildSearchParameters","_x2","str","toLowerCase","_request","_callee3","_this4","_searches$","_searches$2","searches","commonParams","_searches$3","conversation","conversation_id","conversation_model_id","_callee3$","_context3","Promise","all","searchParams","modifiedSearchParams","multiSearch","perform","request","get"],"sources":["../src/SearchRequestAdapter.js"],"sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  static get DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*)((?!:).):(?!:)(.*)\");\n  }\n\n  static get DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*?)(<=|>=|>|<|=)(.*)\");\n  }\n\n  constructor(instantsearchRequests, typesenseClient, configuration) {\n    this.instantsearchRequests = instantsearchRequests;\n    this.typesenseClient = typesenseClient;\n    this.configuration = configuration;\n    this.additionalSearchParameters = configuration.additionalSearchParameters;\n    this.collectionSpecificSearchParameters = configuration.collectionSpecificSearchParameters;\n    this.queryEnhancementCache = new Map();\n  }\n\n  _shouldUseExactMatchForField(fieldName, collectionName) {\n    if (\n      this.configuration.collectionSpecificFilterByOptions?.[collectionName]?.[fieldName]?.exactMatch === false ||\n      this.configuration.filterByOptions?.[fieldName]?.exactMatch === false\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  _adaptFacetFilters(facetFilters, collectionName) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    /**\n     * Need to transform:\n     *  facetFilters = [[\"field1:value1\", \"field1:value2\"], \"field2:value3\", \"field2:value4\"]\n     *\n     * Into this:\n     *  field1:=[value1,value2] && field2:=value3 && field2:=value4\n     *\n     * Steps:\n     *  - For each item in facetFilters\n     *    - If item is array\n     *      - OR values together.\n     *      - Warn if field names are not the same\n     *    - If item is string, convert to facet:=value format\n     *  - Join strings by &&\n     */\n\n    const transformedTypesenseFilters = facetFilters.map((item) => {\n      if (Array.isArray(item)) {\n        // Need to transform:\n        // facetFilters = [\"field1:value1\", \"field1:value2\", \"facetN:valueN\"]\n        //\n        // Into this:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        //     \"fieldN\": [\"valueN\"]\n        // }\n\n        const intermediateFacetFilters = {};\n        item.forEach((facetFilter) => {\n          const { fieldName, fieldValue } = this._parseFacetFilter(facetFilter);\n          intermediateFacetFilters[fieldName] = intermediateFacetFilters[fieldName] || [];\n          intermediateFacetFilters[fieldName].push(fieldValue);\n        });\n\n        if (Object.keys(intermediateFacetFilters).length > 1) {\n          console.error(\n            `[Typesense-Instantsearch-Adapter] Typesense does not support cross-field ORs at the moment. The adapter could not OR values between these fields: ${Object.keys(\n              intermediateFacetFilters,\n            ).join(\",\")}`,\n          );\n        }\n\n        // Pick first value from intermediateFacetFilters\n        const fieldName = Object.keys(intermediateFacetFilters)[0];\n        const fieldValues = intermediateFacetFilters[fieldName];\n\n        // Need to transform:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        // }\n        //\n        // Into this:\n        // field1:=[value1,value2]\n\n        // Partition values into included and excluded values\n        const [excludedFieldValues, includedFieldValues] = fieldValues.reduce(\n          (result, fieldValue) => {\n            if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n              result[0].push(fieldValue.substring(1));\n            } else {\n              result[1].push(fieldValue);\n            }\n            return result;\n          },\n          [[], []],\n        );\n\n        const typesenseFilterStringComponents = [];\n        if (includedFieldValues.length > 0) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":=\" : \":\";\n          typesenseFilterStringComponents.push(\n            `${fieldName}${operator}[${includedFieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}]`,\n          );\n        }\n        if (excludedFieldValues.length > 0) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":!=\" : \":!\";\n          typesenseFilterStringComponents.push(\n            `${fieldName}${operator}[${excludedFieldValues.map((v) => this._escapeFacetValue(v)).join(\",\")}]`,\n          );\n        }\n\n        const typesenseFilterString = typesenseFilterStringComponents.filter((f) => f).join(\" && \");\n\n        return typesenseFilterString;\n      } else {\n        // Need to transform:\n        //  fieldName:fieldValue\n        // Into\n        //  fieldName:=fieldValue\n\n        const { fieldName, fieldValue } = this._parseFacetFilter(item);\n        let typesenseFilterString;\n        if (fieldValue.startsWith(\"-\") && !this._isNumber(fieldValue)) {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":!=\" : \":!\";\n          typesenseFilterString = `${fieldName}${operator}[${this._escapeFacetValue(fieldValue.substring(1))}]`;\n        } else {\n          const operator = this._shouldUseExactMatchForField(fieldName, collectionName) ? \":=\" : \":\";\n          typesenseFilterString = `${fieldName}${operator}[${this._escapeFacetValue(fieldValue)}]`;\n        }\n\n        return typesenseFilterString;\n      }\n    });\n\n    adaptedResult = transformedTypesenseFilters.join(\" && \");\n    // console.log(`${JSON.stringify(facetFilters)} => ${adaptedResult}`);\n\n    return adaptedResult;\n  }\n\n  _parseFacetFilter(facetFilter) {\n    let filterStringMatchingRegex, facetFilterMatches, fieldName, fieldValue;\n\n    // This is helpful when the filter looks like `facetName:with:colons:facetValue:with:colons` and the default regex above parses the filter as `facetName:with:colons:facetValue:with` and `colon`.\n    // So if a facetValue can contain a colon, we ask users to pass in all possible facetable fields in `facetableFieldsWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters\n        .flat()\n        .map((f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"));\n      filterStringMatchingRegex = new RegExp(`^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")}):(.*)$`);\n      facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n      if (facetFilterMatches != null) {\n        fieldName = `${facetFilterMatches[1]}`;\n        fieldValue = `${facetFilterMatches[2]}`;\n\n        return {\n          fieldName,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet\n    // Use the default filter parsing regex, which assumes that only facet names have colons, and not facet values\n    filterStringMatchingRegex = this.constructor.DEFAULT_FACET_FILTER_STRING_MATCHING_REGEX;\n    facetFilterMatches = facetFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(facetFilter);\n    // console.log(facetFilterMatches);\n\n    if (facetFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a facet filter \\`${facetFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      fieldName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n      fieldValue = `${facetFilterMatches[3]}`;\n    }\n\n    return {\n      fieldName,\n      fieldValue,\n    };\n  }\n\n  _escapeFacetValue(value) {\n    // Don't escape booleans, integers or floats\n    if (typeof value === \"boolean\" || value === \"true\" || value === \"false\" || this._isNumber(value)) {\n      return value;\n    }\n    return `\\`${value}\\``;\n  }\n\n  _isNumber(value) {\n    return (\n      Number.isInteger(value % 1) || // Mod 1 will automatically try converting string values to integer/float\n      !!(value % 1)\n    ); // Is Float\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    // Need to transform this:\n    // [\"field1<=634\", \"field1>=289\", \"field2<=5\", \"field3>=3\"]\n    // to:\n    // \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    // Transform to intermediate structure:\n    // {\n    //   field1: {\n    //     \"<=\": 634,\n    //     \">=\": 289\n    //   },\n    //   field2: {\n    //     \"<=\": 5\n    //   },\n    //   field3: {\n    //     \">=\": 3\n    //   }\n    // };\n    const filtersHash = {};\n    numericFilters.forEach((filter) => {\n      const { fieldName, operator, fieldValue } = this._parseNumericFilter(filter);\n      filtersHash[fieldName] = filtersHash[fieldName] || {};\n      filtersHash[fieldName][operator] = fieldValue;\n    });\n\n    // Transform that to:\n    //  \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    const adaptedFilters = [];\n    Object.keys(filtersHash).forEach((field) => {\n      if (filtersHash[field][\"<=\"] != null && filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}]`);\n      } else if (filtersHash[field][\"<=\"] != null) {\n        adaptedFilters.push(`${field}:<=${filtersHash[field][\"<=\"]}`);\n      } else if (filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:>=${filtersHash[field][\">=\"]}`);\n      } else if (filtersHash[field][\"=\"] != null) {\n        adaptedFilters.push(`${field}:=${filtersHash[field][\"=\"]}`);\n      } else {\n        console.warn(\n          `[Typesense-Instantsearch-Adapter] Unsupported operator found ${JSON.stringify(filtersHash[field])}`,\n        );\n      }\n    });\n\n    adaptedResult = adaptedFilters.join(\" && \");\n    return adaptedResult;\n  }\n\n  _parseNumericFilter(numericFilter) {\n    let filterStringMatchingRegex, numericFilterMatches;\n    let fieldName, operator, fieldValue;\n\n    // The following is helpful when the facetName has special characters like > and the default regex fails to parse it properly.\n    // So we ask users to pass in facetable fields in `facetableFieldsWithSpecialCharactersWithSpecialCharacters` when instantiating the adapter, so we can explicitly match against that.\n    if (this.configuration.facetableFieldsWithSpecialCharacters?.length > 0) {\n      // escape any Regex special characters, source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n      const sanitizedFacetableFieldsWithSpecialCharacters = this.configuration.facetableFieldsWithSpecialCharacters.map(\n        (f) => f.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n      );\n      filterStringMatchingRegex = new RegExp(\n        `^(${sanitizedFacetableFieldsWithSpecialCharacters.join(\"|\")})(<=|>=|>|<|=)(.*)$`,\n      );\n\n      numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n      if (numericFilterMatches != null) {\n        // If no matches are found or if the above didn't trigger, fall back to the default regex\n        [, fieldName, operator, fieldValue] = numericFilterMatches;\n        return {\n          fieldName,\n          operator,\n          fieldValue,\n        };\n      }\n    }\n\n    // If we haven't found any matches yet, fall back to the default regex\n    filterStringMatchingRegex = this.constructor.DEFAULT_NUMERIC_FILTER_STRING_MATCHING_REGEX;\n    numericFilterMatches = numericFilter.match(filterStringMatchingRegex);\n\n    // console.log(filterStringMatchingRegex);\n    // console.log(numericFilter);\n    // console.log(numericFilterMatches);\n\n    if (numericFilterMatches == null) {\n      console.error(\n        `[Typesense-Instantsearch-Adapter] Parsing failed for a numeric filter \\`${numericFilter}\\` with the Regex \\`${filterStringMatchingRegex}\\`. If you have field names with special characters, be sure to add them to a parameter called \\`facetableFieldsWithSpecialCharacters\\` when instantiating the adapter.`,\n      );\n    } else {\n      [, fieldName, operator, fieldValue] = numericFilterMatches;\n    }\n\n    return {\n      fieldName,\n      operator,\n      fieldValue,\n    };\n  }\n\n  _adaptGeoFilter({ insideBoundingBox, aroundRadius, aroundLatLng, insidePolygon }) {\n    // Give this parameter first priority if it exists, since\n    if (insideBoundingBox) {\n      let x1, y1, x2, y2;\n      if (Array.isArray(insideBoundingBox)) {\n        [x1, y1, x2, y2] = insideBoundingBox.flat();\n      } else {\n        [x1, y1, x2, y2] = insideBoundingBox.split(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${x1}, ${y1}, ${x1}, ${y2}, ${x2}, ${y2}, ${x2}, ${y1})`;\n    }\n\n    if (aroundLatLng || aroundRadius) {\n      if (!aroundRadius || aroundRadius === \"all\") {\n        throw new Error(\n          \"[Typesense-Instantsearch-Adapter] In Typesense, geo-filtering around a lat/lng also requires a numerical radius. \" +\n            \"So the `aroundRadius` parameter is required when `aroundLatLng` is used. \" +\n            \"If you intend to just geo-sort around a lat/long, you want to use the sortBy InstantSearch widget (or a virtual sortBy custom widget).\",\n        );\n      }\n      const adaptedAroundRadius = `${parseFloat(aroundRadius) / 1000} km`; // aroundRadius is in meters\n      return `${this.configuration.geoLocationField}:(${aroundLatLng}, ${adaptedAroundRadius})`;\n    }\n\n    if (insidePolygon) {\n      let coordinates = insidePolygon;\n      if (Array.isArray(insidePolygon)) {\n        coordinates = insidePolygon.flat().join(\",\");\n      }\n      return `${this.configuration.geoLocationField}:(${coordinates})`;\n    }\n  }\n\n  _adaptFilters(instantsearchParams, collectionName) {\n    const adaptedFilters = [];\n\n    // `filters` can be used with the `Configure` widget\n    // However the format needs to be in the Typesense filter_by format, instead of Algolia filter format.\n    if (instantsearchParams.filters) {\n      adaptedFilters.push(instantsearchParams.filters);\n    }\n    adaptedFilters.push(this._adaptFacetFilters(instantsearchParams.facetFilters, collectionName));\n    adaptedFilters.push(this._adaptNumericFilters(instantsearchParams.numericFilters));\n    adaptedFilters.push(this._adaptGeoFilter(instantsearchParams));\n\n    return adaptedFilters.filter((filter) => filter && filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _adaptFacetBy(facets, collectionName) {\n    return [facets]\n      .flat()\n      .map((facet) => {\n        if (this.configuration.collectionSpecificFacetByOptions?.[collectionName]?.[facet]) {\n          return `${facet}${this.configuration.collectionSpecificFacetByOptions[collectionName][facet]}`;\n        } else if (this.configuration.facetByOptions[facet]) {\n          return `${facet}${this.configuration.facetByOptions[facet]}`;\n        } else {\n          return facet;\n        }\n      })\n      .join(\",\");\n  }\n\n  _adaptRulesContextsToOverrideTags(ruleContexts) {\n    return ruleContexts.join(\",\");\n  }\n\n  /**\n   * Enhances a search query by calling an external API\n   *\n   * @param {string} query - The original search query\n   * @returns {Promise<string>} - The enhanced query, or original query if enhancement fails\n   *\n   * @description\n   * This method sends the query to an external enhancement API which can perform:\n   * - Query expansion (adding synonyms or related terms)\n   * - Spell correction\n   * - Language-specific processing (e.g., Arabic text normalization)\n   * - Domain-specific query understanding\n   *\n   * The API should return a response in the format:\n   * {\n   *   \"processed\": \"enhanced query\",\n   *   \"original\": \"original query\"\n   * }\n   *\n   * If the enhancement fails for any reason (network error, timeout, invalid response),\n   * the method will gracefully fall back to returning the original query.\n   */\n  async _enhanceQuery(query) {\n    if (!query || query === \"*\") {\n      return query;\n    }\n\n    // Check if query enhancement is enabled\n    if (!this.configuration.queryEnhancement?.enabled) {\n      return query;\n    }\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.configuration.queryEnhancement.timeout || 5000);\n\n      const response = await fetch(this.configuration.queryEnhancement.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: query,\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      // Handle the actual response format\n      if (data && data.processed) {\n        // Use processed text if available, otherwise fallback to original\n        return data.processed || query;\n      }\n      return query;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.warn(\n          `[Typesense-Instantsearch-Adapter] Query enhancement timed out after ${this.configuration.queryEnhancement.timeout || 5000}ms`,\n        );\n      } else {\n        console.warn(\"[Typesense-Instantsearch-Adapter] Query enhancement failed:\", error.message);\n      }\n      return query; // Fallback to original query\n    }\n  }\n\n  async _buildSearchParameters(instantsearchRequest) {\n    const params = instantsearchRequest.params;\n    const indexName = instantsearchRequest.indexName;\n    const adaptedCollectionName = this._adaptIndexName(indexName);\n\n    // Convert all common parameters to snake case\n    const snakeCasedAdditionalSearchParameters = {};\n    for (const [key, value] of Object.entries(this.additionalSearchParameters)) {\n      snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n    }\n\n    // Override, collection specific parameters\n    if (this.collectionSpecificSearchParameters[adaptedCollectionName]) {\n      for (const [key, value] of Object.entries(this.collectionSpecificSearchParameters[adaptedCollectionName])) {\n        snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n      }\n    }\n\n    const typesenseSearchParams = Object.assign({}, snakeCasedAdditionalSearchParameters);\n    const adaptedSortBy = this._adaptSortBy(indexName);\n\n    // Only enhance query if it's from SearchBox (when facets are not present and query exists)\n    const originalQuery = params.query === \"\" || params.query === undefined ? \"*\" : params.query;\n    let enhancedQuery;\n\n    // Check if this is a SearchBox request (no facets and has query)\n    if (!params.facets && params.query !== undefined) {\n      enhancedQuery = await this._enhanceQuery(originalQuery);\n    } else {\n      enhancedQuery = originalQuery;\n    }\n\n    Object.assign(typesenseSearchParams, {\n      collection: adaptedCollectionName,\n      q: enhancedQuery,\n      facet_by:\n        snakeCasedAdditionalSearchParameters.facet_by || this._adaptFacetBy(params.facets, adaptedCollectionName),\n      filter_by: this._adaptFilters(params, adaptedCollectionName) || snakeCasedAdditionalSearchParameters.filter_by,\n      sort_by: adaptedSortBy || snakeCasedAdditionalSearchParameters.sort_by,\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1,\n    });\n\n    if (params.hitsPerPage != null) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.per_page = 0;\n    }\n\n    if (params.ruleContexts && params.ruleContexts.length > 0) {\n      typesenseSearchParams.override_tags = this._adaptRulesContextsToOverrideTags(params.ruleContexts);\n    }\n\n    // If a custom vector query is specified, set q=*\n    if (params.typesenseVectorQuery) {\n      typesenseSearchParams.vector_query = params.typesenseVectorQuery;\n    }\n\n    // Allow for conditional disabling of overrides, for particular sort orders\n    let sortByOption =\n      this.configuration.collectionSpecificSortByOptions?.[adaptedCollectionName]?.[typesenseSearchParams[\"sort_by\"]] ||\n      this.configuration.sortByOptions?.[typesenseSearchParams[\"sort_by\"]];\n    if (sortByOption?.[\"enable_overrides\"] != null) {\n      typesenseSearchParams[\"enable_overrides\"] = sortByOption[\"enable_overrides\"];\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    // Filter out empty or null values, so we don't accidentally override values set in presets\n    // eslint-disable-next-line no-unused-vars\n    return Object.fromEntries(Object.entries(typesenseSearchParams).filter(([_, v]) => v != null && v !== \"\"));\n  }\n\n  _camelToSnakeCase(str) {\n    return str\n      .split(/(?=[A-Z])/)\n      .join(\"_\")\n      .toLowerCase();\n  }\n\n  async request() {\n    let searches = await Promise.all(\n      this.instantsearchRequests.map((instantsearchRequest) => this._buildSearchParameters(instantsearchRequest)),\n    );\n\n    // If this is a conversational search, then move conversation related params to query params\n    let commonParams = {};\n    if (searches[0]?.conversation === true || searches[0]?.conversation === \"true\") {\n      const { q, conversation, conversation_id, conversation_model_id } = searches[0];\n      commonParams = { q, conversation, conversation_id, conversation_model_id };\n\n      searches = searches.map((searchParams) => {\n        // eslint-disable-next-line no-unused-vars\n        const { q, conversation, conversation_id, conversation_model_id, ...modifiedSearchParams } = searchParams;\n        return modifiedSearchParams;\n      });\n    }\n\n    return this.typesenseClient.multiSearch.perform({ searches: searches }, commonParams);\n  }\n}\n"],"mappings":"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","ignoreList":[]}